/*************************************************************************
Copyright (c) 2019 Cognitics, Inc.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
****************************************************************************/
#include "sfa/Buffer3D.h"

namespace sfa {

    void Buffer3D::edge::Interpolate(Buffer3D::vertexSP v0, Buffer3D::vertexSP v1)
    {
    //    Interpolate Point
        double del = (-v0->value)/(v1->value - v0->value);
        point = PointSP(new Point(
                v0->point->X() + del*(v1->point->X() - v0->point->X()),
                v0->point->Y() + del*(v1->point->Y() - v0->point->Y()),
                v0->point->Z() + del*(v1->point->Z() - v0->point->Z())
            ));
    //    Interpolate Normal Direction
        if (v0->value > v1->value) norm = PointSP(new Point(v0->point->X() - v1->point->X(), v0->point->Y() - v1->point->Y(), v0->point->Z() - v1->point->Z()));
        else norm = PointSP(new Point(v1->point->X() - v0->point->X(), v1->point->Y() - v0->point->Y(), v1->point->Z() - v0->point->Z()));
    }

    ccl::uint8_t Buffer3D::cube::CaseIndex(void)
    {
        return    1*(verts[0]->value <= 0) +
                2*(verts[1]->value <= 0) +
                4*(verts[2]->value <= 0) +
                8*(verts[3]->value <= 0) +
                16*(verts[4]->value <= 0) +
                32*(verts[5]->value <= 0) +
                64*(verts[6]->value <= 0) +
                128*(verts[7]->value <= 0);
    }

    void Buffer3D::cube::ComputeEdges(void)
    {
        if (!edges[0]->point) edges[0]->Interpolate(verts[0],verts[1]);
        if (!edges[1]->point) edges[1]->Interpolate(verts[1],verts[2]);
        if (!edges[2]->point) edges[2]->Interpolate(verts[2],verts[3]);
        if (!edges[3]->point) edges[3]->Interpolate(verts[3],verts[0]);
        if (!edges[4]->point) edges[4]->Interpolate(verts[4],verts[5]);
        if (!edges[5]->point) edges[5]->Interpolate(verts[5],verts[6]);
        if (!edges[6]->point) edges[6]->Interpolate(verts[6],verts[7]);
        if (!edges[7]->point) edges[7]->Interpolate(verts[7],verts[4]);
        if (!edges[8]->point) edges[8]->Interpolate(verts[0],verts[4]);
        if (!edges[9]->point) edges[9]->Interpolate(verts[1],verts[5]);
        if (!edges[10]->point) edges[10]->Interpolate(verts[3],verts[7]);
        if (!edges[11]->point) edges[11]->Interpolate(verts[2],verts[6]);
    }

    const ccl::uint8_t Buffer3D::Ambiguous_Cases[60] =
    {
        61,  62,  87,  91,  93,  94,  95,  165, 107, 109,
        117, 121, 122, 123, 124, 126, 135, 149, 150, 151,
        154, 158, 163, 166, 167, 169, 170, 171, 172, 173,
        174, 175, 180, 181, 182, 183, 186, 188, 189, 195,
        197, 199, 202, 203, 210, 211, 213, 214, 218, 219,
        222, 225, 227, 229, 231, 233, 234, 237, 245, 250
    };

    const ccl::int8_t Buffer3D::Triangles_N[256][15] =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, 1, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 2, 11, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 8, 3, 2, 11, 8, 11, 9, 8, -1, -1, -1, -1, -1, -1 },
        { 3, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 10, 2, 8, 10, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 9, 0, 2, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 10, 2, 1, 9, 10, 9, 8, 10, -1, -1, -1, -1, -1, -1 },
        { 3, 11, 1, 10, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 11, 1, 0, 8, 11, 8, 10, 11, -1, -1, -1, -1, -1, -1 },
        { 3, 9, 0, 3, 10, 9, 10, 11, 9, -1, -1, -1, -1, -1, -1 },
        { 9, 8, 11, 11, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 4, 7, 3, 0, 4, 1, 2, 11, -1, -1, -1, -1, -1, -1 },
        { 9, 2, 11, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1 },
        { 2, 11, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1 },
        { 8, 4, 7, 3, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 10, 4, 7, 10, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1 },
        { 9, 0, 1, 8, 4, 7, 2, 3, 10, -1, -1, -1, -1, -1, -1 },
        { 4, 7, 10, 9, 4, 10, 9, 10, 2, 9, 2, 1, -1, -1, -1 },
        { 3, 11, 1, 3, 10, 11, 7, 8, 4, -1, -1, -1, -1, -1, -1 },
        { 1, 10, 11, 1, 4, 10, 1, 0, 4, 7, 10, 4, -1, -1, -1 },
        { 4, 7, 8, 9, 0, 10, 9, 10, 11, 10, 0, 3, -1, -1, -1 },
        { 4, 7, 10, 4, 10, 9, 9, 10, 11, -1, -1, -1, -1, -1, -1 },
        { 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 0, 8, 1, 2, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1 },
        { 5, 2, 11, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1 },
        { 2, 11, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1 },
        { 9, 5, 4, 2, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 10, 2, 0, 8, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1 },
        { 0, 5, 4, 0, 1, 5, 2, 3, 10, -1, -1, -1, -1, -1, -1 },
        { 2, 1, 5, 2, 5, 8, 2, 8, 10, 4, 8, 5, -1, -1, -1 },
        { 11, 3, 10, 11, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1 },
        { 4, 9, 5, 0, 8, 1, 8, 11, 1, 8, 10, 11, -1, -1, -1 },
        { 5, 4, 0, 5, 0, 10, 5, 10, 11, 10, 0, 3, -1, -1, -1 },
        { 5, 4, 8, 5, 8, 11, 11, 8, 10, -1, -1, -1, -1, -1, -1 },
        { 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1 },
        { 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1 },
        { 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 7, 8, 9, 5, 7, 11, 1, 2, -1, -1, -1, -1, -1, -1 },
        { 11, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1 },
        { 8, 0, 2, 8, 2, 5, 8, 5, 7, 11, 5, 2, -1, -1, -1 },
        { 2, 11, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1 },
        { 7, 9, 5, 7, 8, 9, 3, 10, 2, -1, -1, -1, -1, -1, -1 },
        { 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 10, -1, -1, -1 },
        { 2, 3, 10, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1 },
        { 10, 2, 1, 10, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1 },
        { 9, 5, 8, 8, 5, 7, 11, 1, 3, 11, 3, 10, -1, -1, -1 },
        { 5, 7, 10, 5, 10, 11, 1, 0, 9, -1, -1, -1, -1, -1, -1 },
        { 10, 11, 5, 10, 5, 7, 8, 0, 3, -1, -1, -1, -1, -1, -1 },
        { 10, 11, 5, 7, 10, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 11, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, 5, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 0, 1, 5, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 8, 3, 1, 9, 8, 5, 11, 6, -1, -1, -1, -1, -1, -1 },
        { 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1 },
        { 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1 },
        { 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1 },
        { 2, 3, 10, 11, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 10, 0, 8, 10, 2, 0, 11, 6, 5, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 9, 2, 3, 10, 5, 11, 6, -1, -1, -1, -1, -1, -1 },
        { 5, 11, 6, 1, 9, 2, 9, 10, 2, 9, 8, 10, -1, -1, -1 },
        { 6, 3, 10, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 10, 0, 10, 5, 0, 5, 1, 5, 10, 6, -1, -1, -1 },
        { 3, 10, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1 },
        { 6, 5, 9, 6, 9, 10, 10, 9, 8, -1, -1, -1, -1, -1, -1 },
        { 5, 11, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 3, 0, 4, 7, 3, 6, 5, 11, -1, -1, -1, -1, -1, -1 },
        { 1, 9, 0, 5, 11, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1 },
        { 11, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1 },
        { 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1 },
        { 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1 },
        { 7, 3, 2, 7, 2, 6, 5, 9, 4, -1, -1, -1, -1, -1, -1 },
        { 3, 10, 2, 7, 8, 4, 11, 6, 5, -1, -1, -1, -1, -1, -1 },
        { 5, 11, 6, 4, 7, 2, 4, 2, 0, 2, 7, 10, -1, -1, -1 },
        { 0, 1, 9, 4, 7, 8, 2, 3, 10, 5, 11, 6, -1, -1, -1 },
        { 9, 4, 5, 11, 2, 1, 7, 10, 6, -1, -1, -1, -1, -1, -1 },
        { 8, 4, 7, 3, 10, 5, 3, 5, 1, 5, 10, 6, -1, -1, -1 },
        { 5, 1, 0, 5, 0, 4, 7, 10, 6, -1, -1, -1, -1, -1, -1 },
        { 0, 3, 8, 4, 5, 9, 10, 6, 7, -1, -1, -1, -1, -1, -1 },
        { 4, 5, 9, 7, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 11, 4, 9, 6, 4, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 11, 6, 4, 9, 11, 0, 8, 3, -1, -1, -1, -1, -1, -1 },
        { 11, 0, 1, 11, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1 },
        { 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 11, -1, -1, -1 },
        { 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1 },
        { 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1 },
        { 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1 },
        { 11, 4, 9, 11, 6, 4, 10, 2, 3, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 2, 2, 8, 10, 4, 9, 11, 4, 11, 6, -1, -1, -1 },
        { 3, 10, 2, 0, 1, 6, 0, 6, 4, 6, 1, 11, -1, -1, -1 },
        { 6, 4, 8, 6, 8, 10, 2, 1, 11, -1, -1, -1, -1, -1, -1 },
        { 9, 6, 4, 9, 3, 6, 9, 1, 3, 10, 6, 3, -1, -1, -1 },
        { 8, 10, 6, 8, 6, 4, 9, 1, 0, -1, -1, -1, -1, -1, -1 },
        { 3, 10, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1 },
        { 6, 4, 8, 10, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 7, 11, 6, 7, 8, 11, 8, 9, 11, -1, -1, -1, -1, -1, -1 },
        { 0, 7, 3, 0, 11, 7, 0, 9, 11, 6, 7, 11, -1, -1, -1 },
        { 11, 6, 7, 1, 11, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1 },
        { 11, 6, 7, 11, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1 },
        { 2, 6, 7, 2, 7, 3, 0, 9, 1, -1, -1, -1, -1, -1, -1 },
        { 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1 },
        { 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 3, 10, 11, 6, 8, 11, 8, 9, 8, 6, 7, -1, -1, -1 },
        { 2, 0, 9, 2, 9, 11, 6, 7, 10, -1, -1, -1, -1, -1, -1 },
        { 1, 11, 2, 3, 8, 0, 6, 7, 10, -1, -1, -1, -1, -1, -1 },
        { 11, 2, 1, 6, 7, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 8, 9, 1, 8, 1, 3, 10, 6, 7, -1, -1, -1, -1, -1, -1 },
        { 0, 9, 1, 10, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 8, 0, 10, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 7, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 7, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 0, 8, 10, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 9, 10, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 8, 1, 9, 8, 3, 1, 10, 7, 6, -1, -1, -1, -1, -1, -1 },
        { 11, 1, 2, 6, 10, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, 3, 0, 8, 6, 10, 7, -1, -1, -1, -1, -1, -1 },
        { 2, 9, 0, 2, 11, 9, 6, 10, 7, -1, -1, -1, -1, -1, -1 },
        { 2, 10, 3, 11, 8, 6, 11, 9, 8, 8, 7, 6, -1, -1, -1 },
        { 7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1 },
        { 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1 },
        { 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1 },
        { 11, 7, 6, 11, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1 },
        { 11, 7, 6, 1, 7, 11, 1, 8, 7, 1, 0, 8, -1, -1, -1 },
        { 0, 3, 7, 0, 7, 11, 0, 11, 9, 6, 11, 7, -1, -1, -1 },
        { 7, 6, 11, 7, 11, 8, 8, 11, 9, -1, -1, -1, -1, -1, -1 },
        { 6, 8, 4, 10, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 6, 10, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1 },
        { 8, 6, 10, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1 },
        { 9, 4, 6, 9, 6, 3, 9, 3, 1, 10, 3, 6, -1, -1, -1 },
        { 6, 8, 4, 6, 10, 8, 2, 11, 1, -1, -1, -1, -1, -1, -1 },
        { 3, 2, 10, 0, 6, 1, 0, 4, 6, 6, 11, 1, -1, -1, -1 },
        { 0, 2, 8, 2, 10, 8, 4, 11, 9, 4, 6, 11, -1, -1, -1 },
        { 11, 9, 4, 11, 4, 6, 10, 3, 2, -1, -1, -1, -1, -1, -1 },
        { 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1 },
        { 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 8, 0, 1, 9, 2, 2, 9, 4, 2, 4, 6, -1, -1, -1 },
        { 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1 },
        { 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 11, 1, -1, -1, -1 },
        { 11, 1, 0, 11, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1 },
        { 4, 6, 11, 4, 11, 9, 0, 3, 8, -1, -1, -1, -1, -1, -1 },
        { 11, 9, 4, 6, 11, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 9, 5, 7, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, 4, 9, 5, 10, 7, 6, -1, -1, -1, -1, -1, -1 },
        { 5, 0, 1, 5, 4, 0, 7, 6, 10, -1, -1, -1, -1, -1, -1 },
        { 8, 7, 4, 3, 5, 10, 3, 1, 5, 5, 6, 10, -1, -1, -1 },
        { 9, 5, 4, 11, 1, 2, 7, 6, 10, -1, -1, -1, -1, -1, -1 },
        { 0, 9, 1, 4, 8, 7, 2, 10, 3, 5, 6, 11, -1, -1, -1 },
        { 5, 6, 11, 4, 2, 7, 4, 0, 2, 2, 10, 7, -1, -1, -1 },
        { 3, 2, 10, 7, 4, 8, 11, 5, 6, -1, -1, -1, -1, -1, -1 },
        { 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1 },
        { 8, 7, 4, 9, 5, 0, 0, 5, 6, 0, 6, 2, -1, -1, -1 },
        { 1, 5, 2, 5, 6, 2, 3, 4, 0, 3, 7, 4, -1, -1, -1 },
        { 6, 2, 1, 6, 1, 5, 4, 8, 7, -1, -1, -1, -1, -1, -1 },
        { 11, 5, 6, 1, 7, 9, 1, 3, 7, 7, 4, 9, -1, -1, -1 },
        { 1, 0, 9, 5, 6, 11, 8, 7, 4, -1, -1, -1, -1, -1, -1 },
        { 4, 0, 3, 4, 3, 7, 6, 11, 5, -1, -1, -1, -1, -1, -1 },
        { 5, 6, 11, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 6, 9, 5, 6, 10, 9, 10, 8, 9, -1, -1, -1, -1, -1, -1 },
        { 3, 6, 10, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1 },
        { 0, 10, 8, 0, 5, 10, 0, 1, 5, 5, 6, 10, -1, -1, -1 },
        { 6, 10, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1 },
        { 5, 6, 11, 1, 2, 9, 9, 2, 10, 9, 10, 8, -1, -1, -1 },
        { 0, 9, 1, 2, 10, 3, 5, 6, 11, -1, -1, -1, -1, -1, -1 },
        { 10, 8, 0, 10, 0, 2, 11, 5, 6, -1, -1, -1, -1, -1, -1 },
        { 2, 10, 3, 11, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1 },
        { 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1 },
        { 1, 5, 6, 1, 6, 2, 3, 8, 0, -1, -1, -1, -1, -1, -1 },
        { 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 3, 8, 1, 8, 9, 5, 6, 11, -1, -1, -1, -1, -1, -1 },
        { 9, 1, 0, 5, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 3, 8, 5, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 11, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 10, 5, 11, 7, 5, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 10, 5, 11, 10, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1 },
        { 5, 10, 7, 5, 11, 10, 1, 9, 0, -1, -1, -1, -1, -1, -1 },
        { 9, 8, 5, 8, 7, 5, 11, 3, 1, 11, 10, 3, -1, -1, -1 },
        { 10, 1, 2, 10, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1 },
        { 2, 10, 3, 0, 8, 1, 1, 8, 7, 1, 7, 5, -1, -1, -1 },
        { 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 10, 7, -1, -1, -1 },
        { 7, 5, 9, 7, 9, 8, 3, 2, 10, -1, -1, -1, -1, -1, -1 },
        { 2, 5, 11, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1 },
        { 8, 2, 0, 8, 5, 2, 8, 7, 5, 11, 2, 5, -1, -1, -1 },
        { 11, 2, 1, 9, 0, 5, 5, 0, 3, 5, 3, 7, -1, -1, -1 },
        { 9, 8, 7, 9, 7, 5, 11, 2, 1, -1, -1, -1, -1, -1, -1 },
        { 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1 },
        { 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1 },
        { 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 5, 8, 4, 5, 11, 8, 11, 10, 8, -1, -1, -1, -1, -1, -1 },
        { 5, 0, 4, 5, 10, 0, 5, 11, 10, 10, 3, 0, -1, -1, -1 },
        { 4, 5, 9, 0, 1, 8, 8, 1, 11, 8, 11, 10, -1, -1, -1 },
        { 11, 10, 3, 11, 3, 1, 9, 4, 5, -1, -1, -1, -1, -1, -1 },
        { 2, 5, 1, 2, 8, 5, 2, 10, 8, 4, 5, 8, -1, -1, -1 },
        { 0, 4, 5, 0, 5, 1, 2, 10, 3, -1, -1, -1, -1, -1, -1 },
        { 0, 2, 10, 0, 10, 8, 4, 5, 9, -1, -1, -1, -1, -1, -1 },
        { 9, 4, 5, 2, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 5, 11, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1 },
        { 5, 11, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1 },
        { 3, 8, 0, 1, 11, 2, 4, 5, 9, -1, -1, -1, -1, -1, -1 },
        { 1, 11, 2, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1 },
        { 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 4, 5, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 10, 7, 4, 9, 10, 9, 11, 10, -1, -1, -1, -1, -1, -1 },
        { 4, 8, 7, 9, 10, 0, 9, 11, 10, 10, 3, 0, -1, -1, -1 },
        { 1, 11, 10, 1, 10, 4, 1, 4, 0, 7, 4, 10, -1, -1, -1 },
        { 3, 1, 11, 3, 11, 10, 7, 4, 8, -1, -1, -1, -1, -1, -1 },
        { 4, 10, 7, 9, 10, 4, 9, 2, 10, 9, 1, 2, -1, -1, -1 },
        { 9, 1, 0, 8, 7, 4, 2, 10, 3, -1, -1, -1, -1, -1, -1 },
        { 10, 7, 4, 10, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1 },
        { 8, 7, 4, 3, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 9, 11, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1 },
        { 9, 11, 2, 9, 2, 0, 8, 7, 4, -1, -1, -1, -1, -1, -1 },
        { 3, 7, 4, 3, 4, 0, 1, 11, 2, -1, -1, -1, -1, -1, -1 },
        { 1, 11, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1 },
        { 0, 9, 1, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 11, 8, 11, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 0, 9, 3, 9, 10, 10, 9, 11, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 11, 0, 11, 8, 8, 11, 10, -1, -1, -1, -1, -1, -1 },
        { 3, 1, 11, 10, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 10, 1, 10, 9, 9, 10, 8, -1, -1, -1, -1, -1, -1 },
        { 1, 0, 9, 2, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 2, 10, 8, 0, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 3, 8, 2, 8, 11, 11, 8, 9, -1, -1, -1, -1, -1, -1 },
        { 9, 11, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 3, 8, 1, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
    };

    const ccl::int8_t Buffer3D::Triangles_A[256][15] = 
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, 1, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 2, 11, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 8, 3, 2, 11, 8, 11, 9, 8, -1, -1, -1, -1, -1, -1 },
        { 3, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 10, 2, 8, 10, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 9, 0, 2, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 10, 2, 1, 9, 10, 9, 8, 10, -1, -1, -1, -1, -1, -1 },
        { 3, 11, 1, 10, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 11, 1, 0, 8, 11, 8, 10, 11, -1, -1, -1, -1, -1, -1 },
        { 3, 9, 0, 3, 10, 9, 10, 11, 9, -1, -1, -1, -1, -1, -1 },
        { 9, 8, 11, 11, 8, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 4, 7, 3, 0, 4, 1, 2, 11, -1, -1, -1, -1, -1, -1 },
        { 9, 2, 11, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1 },
        { 2, 11, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1 },
        { 8, 4, 7, 3, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 10, 4, 7, 10, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1 },
        { 9, 0, 1, 8, 4, 7, 2, 3, 10, -1, -1, -1, -1, -1, -1 },
        { 4, 7, 10, 9, 4, 10, 9, 10, 2, 9, 2, 1, -1, -1, -1 },
        { 3, 11, 1, 3, 10, 11, 7, 8, 4, -1, -1, -1, -1, -1, -1 },
        { 1, 10, 11, 1, 4, 10, 1, 0, 4, 7, 10, 4, -1, -1, -1 },
        { 4, 7, 8, 9, 0, 10, 9, 10, 11, 10, 0, 3, -1, -1, -1 },
        { 4, 7, 10, 4, 10, 9, 9, 10, 11, -1, -1, -1, -1, -1, -1 },
        { 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 0, 8, 1, 2, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1 },
        { 5, 2, 11, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1 },
        { 2, 11, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1 },
        { 9, 5, 4, 2, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 10, 2, 0, 8, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1 },
        { 0, 5, 4, 0, 1, 5, 2, 3, 10, -1, -1, -1, -1, -1, -1 },
        { 2, 1, 5, 2, 5, 8, 2, 8, 10, 4, 8, 5, -1, -1, -1 },
        { 11, 3, 10, 11, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1 },
        { 4, 9, 5, 0, 8, 1, 8, 11, 1, 8, 10, 11, -1, -1, -1 },
        { 5, 4, 0, 5, 0, 10, 5, 10, 11, 10, 0, 3, -1, -1, -1 },
        { 5, 4, 8, 5, 8, 11, 11, 8, 10, -1, -1, -1, -1, -1, -1 },
        { 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1 },
        { 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1 },
        { 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 7, 8, 9, 5, 7, 11, 1, 2, -1, -1, -1, -1, -1, -1 },
        { 11, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1 },
        { 8, 0, 2, 8, 2, 5, 8, 5, 7, 11, 5, 2, -1, -1, -1 },
        { 2, 11, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1 },
        { 7, 9, 5, 7, 8, 9, 3, 10, 2, -1, -1, -1, -1, -1, -1 },
        { 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 10, -1, -1, -1 },
        { 2, 3, 10, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1 },
        { 10, 2, 1, 10, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1 },
        { 9, 5, 8, 8, 5, 7, 11, 1, 3, 11, 3, 10, -1, -1, -1 },
        { 5, 7, 0, 5, 0, 9, 7, 10, 0, 1, 0, 11, 10, 11, 0 },
        { 10, 11, 0, 10, 0, 3, 11, 5, 0, 8, 0, 7, 5, 7, 0 },
        { 10, 11, 5, 7, 10, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 11, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, 5, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 0, 1, 5, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 8, 3, 1, 9, 8, 5, 11, 6, -1, -1, -1, -1, -1, -1 },
        { 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1 },
        { 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1 },
        { 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1 },
        { 2, 3, 10, 11, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 10, 0, 8, 10, 2, 0, 11, 6, 5, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 9, 2, 3, 10, 5, 11, 6, -1, -1, -1, -1, -1, -1 },
        { 5, 11, 6, 1, 9, 2, 9, 10, 2, 9, 8, 10, -1, -1, -1 },
        { 6, 3, 10, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 10, 0, 10, 5, 0, 5, 1, 5, 10, 6, -1, -1, -1 },
        { 3, 10, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1 },
        { 6, 5, 9, 6, 9, 10, 10, 9, 8, -1, -1, -1, -1, -1, -1 },
        { 5, 11, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 3, 0, 4, 7, 3, 6, 5, 11, -1, -1, -1, -1, -1, -1 },
        { 1, 9, 0, 5, 11, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1 },
        { 11, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1 },
        { 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1 },
        { 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1 },
        { 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9 },
        { 3, 10, 2, 7, 8, 4, 11, 6, 5, -1, -1, -1, -1, -1, -1 },
        { 5, 11, 6, 4, 7, 2, 4, 2, 0, 2, 7, 10, -1, -1, -1 },
        { 0, 1, 9, 4, 7, 8, 2, 3, 10, 5, 11, 6, -1, -1, -1 },
        { 9, 2, 1, 9, 10, 2, 9, 4, 10, 7, 10, 4, 5, 11, 6 },
        { 8, 4, 7, 3, 10, 5, 3, 5, 1, 5, 10, 6, -1, -1, -1 },
        { 5, 1, 10, 5, 10, 6, 1, 0, 10, 7, 10, 4, 0, 4, 10 },
        { 0, 5, 9, 0, 6, 5, 0, 3, 6, 10, 6, 3, 8, 4, 7 },
        { 6, 5, 9, 6, 9, 10, 4, 7, 9, 7, 10, 9, -1, -1, -1 },
        { 11, 4, 9, 6, 4, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 11, 6, 4, 9, 11, 0, 8, 3, -1, -1, -1, -1, -1, -1 },
        { 11, 0, 1, 11, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1 },
        { 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 11, -1, -1, -1 },
        { 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1 },
        { 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1 },
        { 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1 },
        { 11, 4, 9, 11, 6, 4, 10, 2, 3, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 2, 2, 8, 10, 4, 9, 11, 4, 11, 6, -1, -1, -1 },
        { 3, 10, 2, 0, 1, 6, 0, 6, 4, 6, 1, 11, -1, -1, -1 },
        { 6, 4, 1, 6, 1, 11, 4, 8, 1, 2, 1, 10, 8, 10, 1 },
        { 9, 6, 4, 9, 3, 6, 9, 1, 3, 10, 6, 3, -1, -1, -1 },
        { 8, 10, 1, 8, 1, 0, 10, 6, 1, 9, 1, 4, 6, 4, 1 },
        { 3, 10, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1 },
        { 6, 4, 8, 10, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 7, 11, 6, 7, 8, 11, 8, 9, 11, -1, -1, -1, -1, -1, -1 },
        { 0, 7, 3, 0, 11, 7, 0, 9, 11, 6, 7, 11, -1, -1, -1 },
        { 11, 6, 7, 1, 11, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1 },
        { 11, 6, 7, 11, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1 },
        { 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9 },
        { 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1 },
        { 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 3, 10, 11, 6, 8, 11, 8, 9, 8, 6, 7, -1, -1, -1 },
        { 2, 0, 7, 2, 7, 10, 0, 9, 7, 6, 7, 11, 9, 11, 7 },
        { 1, 8, 0, 1, 7, 8, 1, 11, 7, 6, 7, 11, 2, 3, 10 },
        { 10, 2, 1, 10, 1, 7, 11, 6, 1, 6, 7, 1, -1, -1, -1 },
        { 8, 9, 6, 8, 6, 7, 9, 1, 6, 10, 6, 3, 1, 3, 6 },
        { 0, 9, 1, 10, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 7, 8, 0, 7, 0, 6, 3, 10, 0, 10, 6, 0, -1, -1, -1 },
        { 7, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 7, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 0, 8, 10, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 9, 10, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 8, 1, 9, 8, 3, 1, 10, 7, 6, -1, -1, -1, -1, -1, -1 },
        { 11, 1, 2, 6, 10, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, 3, 0, 8, 6, 10, 7, -1, -1, -1, -1, -1, -1 },
        { 2, 9, 0, 2, 11, 9, 6, 10, 7, -1, -1, -1, -1, -1, -1 },
        { 6, 10, 7, 2, 11, 3, 11, 8, 3, 11, 9, 8, -1, -1, -1 },
        { 7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1 },
        { 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1 },
        { 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1 },
        { 11, 7, 6, 11, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1 },
        { 11, 7, 6, 1, 7, 11, 1, 8, 7, 1, 0, 8, -1, -1, -1 },
        { 0, 3, 7, 0, 7, 11, 0, 11, 9, 6, 11, 7, -1, -1, -1 },
        { 7, 6, 11, 7, 11, 8, 8, 11, 9, -1, -1, -1, -1, -1, -1 },
        { 6, 8, 4, 10, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 6, 10, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1 },
        { 8, 6, 10, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1 },
        { 9, 4, 6, 9, 6, 3, 9, 3, 1, 10, 3, 6, -1, -1, -1 },
        { 6, 8, 4, 6, 10, 8, 2, 11, 1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, 3, 0, 10, 0, 6, 10, 0, 4, 6, -1, -1, -1 },
        { 4, 10, 8, 4, 6, 10, 0, 2, 9, 2, 11, 9, -1, -1, -1 },
        { 11, 9, 3, 11, 3, 2, 9, 4, 3, 10, 3, 6, 4, 6, 3 },
        { 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1 },
        { 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1 },
        { 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1 },
        { 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 11, 1, -1, -1, -1 },
        { 11, 1, 0, 11, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1 },
        { 4, 6, 3, 4, 3, 8, 6, 11, 3, 0, 3, 9, 11, 9, 3 },
        { 11, 9, 4, 6, 11, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 9, 5, 7, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, 4, 9, 5, 10, 7, 6, -1, -1, -1, -1, -1, -1 },
        { 5, 0, 1, 5, 4, 0, 7, 6, 10, -1, -1, -1, -1, -1, -1 },
        { 10, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1 },
        { 9, 5, 4, 11, 1, 2, 7, 6, 10, -1, -1, -1, -1, -1, -1 },
        { 6, 10, 7, 1, 2, 11, 0, 8, 3, 4, 9, 5, -1, -1, -1 },
        { 7, 6, 10, 5, 4, 11, 4, 2, 11, 4, 0, 2, -1, -1, -1 },
        { 3, 4, 8, 3, 5, 4, 3, 2, 5, 11, 5, 2, 10, 7, 6 },
        { 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1 },
        { 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1 },
        { 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1 },
        { 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8 },
        { 9, 5, 4, 11, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1 },
        { 1, 6, 11, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4 },
        { 4, 0, 11, 4, 11, 5, 0, 3, 11, 6, 11, 7, 3, 7, 11 },
        { 7, 6, 11, 7, 11, 8, 5, 4, 11, 4, 8, 11, -1, -1, -1 },
        { 6, 9, 5, 6, 10, 9, 10, 8, 9, -1, -1, -1, -1, -1, -1 },
        { 3, 6, 10, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1 },
        { 0, 10, 8, 0, 5, 10, 0, 1, 5, 5, 6, 10, -1, -1, -1 },
        { 6, 10, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 11, 9, 5, 10, 9, 10, 8, 10, 5, 6, -1, -1, -1 },
        { 0, 10, 3, 0, 6, 10, 0, 9, 6, 5, 6, 9, 1, 2, 11 },
        { 10, 8, 5, 10, 5, 6, 8, 0, 5, 11, 5, 2, 0, 2, 5 },
        { 6, 10, 3, 6, 3, 5, 2, 11, 3, 11, 5, 3, -1, -1, -1 },
        { 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1 },
        { 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1 },
        { 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8 },
        { 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 3, 6, 1, 6, 11, 3, 8, 6, 5, 6, 9, 8, 9, 6 },
        { 11, 1, 0, 11, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1 },
        { 0, 3, 8, 5, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 11, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 10, 5, 11, 7, 5, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 10, 5, 11, 10, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1 },
        { 5, 10, 7, 5, 11, 10, 1, 9, 0, -1, -1, -1, -1, -1, -1 },
        { 11, 7, 5, 11, 10, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1 },
        { 10, 1, 2, 10, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 10, -1, -1, -1 },
        { 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 10, 7, -1, -1, -1 },
        { 7, 5, 2, 7, 2, 10, 5, 9, 2, 3, 2, 8, 9, 8, 2 },
        { 2, 5, 11, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1 },
        { 8, 2, 0, 8, 5, 2, 8, 7, 5, 11, 2, 5, -1, -1, -1 },
        { 9, 0, 1, 5, 11, 3, 5, 3, 7, 3, 11, 2, -1, -1, -1 },
        { 9, 8, 2, 9, 2, 1, 8, 7, 2, 11, 2, 5, 7, 5, 2 },
        { 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1 },
        { 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1 },
        { 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 5, 8, 4, 5, 11, 8, 11, 10, 8, -1, -1, -1, -1, -1, -1 },
        { 5, 0, 4, 5, 10, 0, 5, 11, 10, 10, 3, 0, -1, -1, -1 },
        { 0, 1, 9, 8, 4, 11, 8, 11, 10, 11, 4, 5, -1, -1, -1 },
        { 11, 10, 4, 11, 4, 5, 10, 3, 4, 9, 4, 1, 3, 1, 4 },
        { 2, 5, 1, 2, 8, 5, 2, 10, 8, 4, 5, 8, -1, -1, -1 },
        { 0, 4, 10, 0, 10, 3, 4, 5, 10, 2, 10, 1, 5, 1, 10 },
        { 0, 2, 5, 0, 5, 9, 2, 10, 5, 4, 5, 8, 10, 8, 5 },
        { 9, 4, 5, 2, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 5, 11, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1 },
        { 5, 11, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1 },
        { 3, 11, 2, 3, 5, 11, 3, 8, 5, 4, 5, 8, 0, 1, 9 },
        { 5, 11, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1 },
        { 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1 },
        { 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1 },
        { 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 10, 7, 4, 9, 10, 9, 11, 10, -1, -1, -1, -1, -1, -1 },
        { 0, 8, 3, 4, 9, 7, 9, 10, 7, 9, 11, 10, -1, -1, -1 },
        { 1, 11, 10, 1, 10, 4, 1, 4, 0, 7, 4, 10, -1, -1, -1 },
        { 3, 1, 4, 3, 4, 8, 1, 11, 4, 7, 4, 10, 11, 10, 4 },
        { 4, 10, 7, 9, 10, 4, 9, 2, 10, 9, 1, 2, -1, -1, -1 },
        { 9, 7, 4, 9, 10, 7, 9, 1, 10, 2, 10, 1, 0, 8, 3 },
        { 10, 7, 4, 10, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1 },
        { 10, 7, 4, 10, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1 },
        { 2, 9, 11, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1 },
        { 9, 11, 7, 9, 7, 4, 11, 2, 7, 8, 7, 0, 2, 0, 7 },
        { 3, 7, 11, 3, 11, 2, 7, 4, 11, 1, 11, 0, 4, 0, 11 },
        { 1, 11, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1 },
        { 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1 },
        { 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 9, 11, 8, 11, 10, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 0, 9, 3, 9, 10, 10, 9, 11, -1, -1, -1, -1, -1, -1 },
        { 0, 1, 11, 0, 11, 8, 8, 11, 10, -1, -1, -1, -1, -1, -1 },
        { 3, 1, 11, 10, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 2, 10, 1, 10, 9, 9, 10, 8, -1, -1, -1, -1, -1, -1 },
        { 3, 0, 9, 3, 9, 10, 1, 2, 9, 2, 10, 9, -1, -1, -1 },
        { 0, 2, 10, 8, 0, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 3, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 3, 8, 2, 8, 11, 11, 8, 9, -1, -1, -1, -1, -1, -1 },
        { 9, 11, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 2, 3, 8, 2, 8, 11, 0, 1, 8, 1, 11, 8, -1, -1, -1 },
        { 1, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
    };

    ccl::uint32_t Buffer3D::Hash(ccl::uint8_t x, ccl::uint8_t y, ccl::uint8_t z)
    {
    /*    Since we have a max tree size of 256x256x256 we can create a guarunteed non-collision hash
        by making a key with bits as follows:
        [8 bits - blank][8 bits - z][8 bits - y][8 bits - x]
    */
        ccl::uint32_t key = 0;
        key += z;
        key = key<<8;
        key += y;
        key = key<<8;
        key += x;
        return key;
    }

    ccl::uint32_t Buffer3D::Hash(cubeSP _cube)
    {
        return Hash(_cube->x, _cube->y, _cube->z);
    }

    ccl::uint32_t Buffer3D::NeighborHash(cubeSP _cube, NeighborID id)
    {
        switch(id)
        {
        case NORTH:    return Hash(_cube->x,_cube->y+1,_cube->z);
        case SOUTH:    return Hash(_cube->x,_cube->y-1,_cube->z);
        case EAST:    return Hash(_cube->x+1,_cube->y,_cube->z);
        case WEST:    return Hash(_cube->x-1,_cube->y,_cube->z);
        case UP:    return Hash(_cube->x,_cube->y,_cube->z+1);
        case DOWN:    return Hash(_cube->x,_cube->y,_cube->z-1);
        default: return Hash(0,0,0);
        }
    }

    Buffer3D::cubeSP Buffer3D::GetCube(ccl::uint8_t x, ccl::uint8_t y, ccl::uint8_t z)
    {
        ccl::uint32_t key = Hash(x,y,z);
        std::map<ccl::uint32_t,cubeSP>::iterator it = grid_map.find(key);
        if (it != grid_map.end()) return it->second;
        else return cubeSP();
    }

    Buffer3D::cubeSP Buffer3D::GetNeighbor(Buffer3D::cubeSP _cube, Buffer3D::NeighborID id)
    {
        ccl::uint32_t key = NeighborHash(_cube,id);
        std::map<ccl::uint32_t,cubeSP>::iterator it = grid_map.find(key);
        if (it != grid_map.end()) return it->second;
        else return cubeSP();
    }

    double Buffer3D::Evaluate(const Geometry* geometry, PointSP point)
    {
        double distance = geometry->distance3D(point.get());
        return distance - threshold;
    }

    PointSP Buffer3D::CreatePoint(ccl::uint8_t x, ccl::uint8_t y, ccl::uint8_t z)
    {
        PointSP point(new Point(
                origin->X() + cube_width*x,
                origin->Y() + cube_width*y,
                origin->Z() + cube_width*z
            ));
        return point;
    }

    Buffer3D::vertexSP Buffer3D::CreateVertex(ccl::uint8_t x, ccl::uint8_t y, ccl::uint8_t z)
    {
    //    This will check absolute value immediately...will try using closest primitive later with UpdateVertex
        PointSP point = CreatePoint(x,y,z);
        double value = Evaluate(parent,point);
        vertexSP vert(new vertex(point,value));
        return vert;
    }

    Buffer3D::cubeSP Buffer3D::CreateCube(ccl::uint8_t x, ccl::uint8_t y, ccl::uint8_t z)
    {
        cubeSP _cube(new cube(x,y,z));

    //    Find the neighbors if they exist
        cubeSP neighbors[6] =
        {
            GetNeighbor(_cube,NORTH),
            GetNeighbor(_cube,SOUTH),
            GetNeighbor(_cube,EAST),
            GetNeighbor(_cube,WEST),
            GetNeighbor(_cube,UP),
            GetNeighbor(_cube,DOWN),
        };

    //    Try to use neighbor vertex points and edges initially
        if (neighbors[NORTH])
        {
            _cube->verts[4] = neighbors[NORTH]->verts[0];
            _cube->verts[5] = neighbors[NORTH]->verts[1];
            _cube->verts[6] = neighbors[NORTH]->verts[2];
            _cube->verts[7] = neighbors[NORTH]->verts[3];
            _cube->edges[4] = neighbors[NORTH]->edges[0];
            _cube->edges[5] = neighbors[NORTH]->edges[1];
            _cube->edges[6] = neighbors[NORTH]->edges[2];
            _cube->edges[7] = neighbors[NORTH]->edges[3];
        }
        if (neighbors[SOUTH])
        {
            _cube->verts[0] = neighbors[SOUTH]->verts[4];
            _cube->verts[1] = neighbors[SOUTH]->verts[5];
            _cube->verts[2] = neighbors[SOUTH]->verts[6];
            _cube->verts[3] = neighbors[SOUTH]->verts[7];
            _cube->edges[0] = neighbors[SOUTH]->edges[4];
            _cube->edges[1] = neighbors[SOUTH]->edges[5];
            _cube->edges[2] = neighbors[SOUTH]->edges[6];
            _cube->edges[3] = neighbors[SOUTH]->edges[7];
        }
        if (neighbors[EAST])
        {
            _cube->verts[1] = neighbors[EAST]->verts[0];
            _cube->verts[2] = neighbors[EAST]->verts[3];
            _cube->verts[5] = neighbors[EAST]->verts[4];
            _cube->verts[6] = neighbors[EAST]->verts[7];
            _cube->edges[1] = neighbors[EAST]->edges[3];
            _cube->edges[11] = neighbors[EAST]->edges[10];
            _cube->edges[5] = neighbors[EAST]->edges[7];
            _cube->edges[9] = neighbors[EAST]->edges[8];
        }
        if (neighbors[WEST])
        {
            _cube->verts[0] = neighbors[WEST]->verts[1];
            _cube->verts[3] = neighbors[WEST]->verts[2];
            _cube->verts[4] = neighbors[WEST]->verts[5];
            _cube->verts[7] = neighbors[WEST]->verts[6];
            _cube->edges[3] = neighbors[WEST]->edges[1];
            _cube->edges[10] = neighbors[WEST]->edges[11];
            _cube->edges[7] = neighbors[WEST]->edges[5];
            _cube->edges[8] = neighbors[WEST]->edges[9];
        }
        if (neighbors[UP])
        {
            _cube->verts[2] = neighbors[UP]->verts[1];
            _cube->verts[3] = neighbors[UP]->verts[0];
            _cube->verts[6] = neighbors[UP]->verts[5];
            _cube->verts[7] = neighbors[UP]->verts[4];
            _cube->edges[2] = neighbors[UP]->edges[0];
            _cube->edges[6] = neighbors[UP]->edges[4];
            _cube->edges[10] = neighbors[UP]->edges[8];
            _cube->edges[11] = neighbors[UP]->edges[9];
        }
        if (neighbors[DOWN])
        {
            _cube->verts[1] = neighbors[DOWN]->verts[2];
            _cube->verts[0] = neighbors[DOWN]->verts[3];
            _cube->verts[5] = neighbors[DOWN]->verts[6];
            _cube->verts[4] = neighbors[DOWN]->verts[7];
            _cube->edges[0] = neighbors[DOWN]->edges[2];
            _cube->edges[4] = neighbors[DOWN]->edges[6];
            _cube->edges[8] = neighbors[DOWN]->edges[10];
            _cube->edges[9] = neighbors[DOWN]->edges[11];
        }

        if (!_cube->verts[0]) _cube->verts[0] = CreateVertex(x,y,z);
        if (!_cube->verts[1]) _cube->verts[1] = CreateVertex(x+1,y,z);
        if (!_cube->verts[2]) _cube->verts[2] = CreateVertex(x+1,y,z+1);
        if (!_cube->verts[3]) _cube->verts[3] = CreateVertex(x,y,z+1);
        if (!_cube->verts[4]) _cube->verts[4] = CreateVertex(x,y+1,z);
        if (!_cube->verts[5]) _cube->verts[5] = CreateVertex(x+1,y+1,z);
        if (!_cube->verts[6]) _cube->verts[6] = CreateVertex(x+1,y+1,z+1);
        if (!_cube->verts[7]) _cube->verts[7] = CreateVertex(x,y+1,z+1);

        for (int i = 0; i < 12; i++) if (!_cube->edges[i]) _cube->edges[i] = edgeSP(new edge);

        grid_map[Hash(_cube)] = _cube;

        return _cube;
    }

    void Buffer3D::UpdateVertex(Buffer3D::vertexSP vert, const Geometry* geometry)
    {
        double distance = Evaluate(geometry,vert->point);
        if (vert->value > distance) vert->value = distance;
    }

    void Buffer3D::AddGeometry(const Geometry* geometry)
    {
        if (!geometry) return;
        
        int i;
        const PolyhedralSurface *tempSurface;
        const GeometryCollection *tempCollection;

        switch(geometry->getWKBGeometryType(false,false))
        {
        case wkbPolyhedralSurface:
            tempSurface = static_cast<const PolyhedralSurface*>(geometry);
            for (i = 0; i < tempSurface->getNumPatches(); i++)
                AddGeometry(tempSurface->getPatchN(i));
            return;
        case wkbMultiPoint:
        case wkbMultiLineString:
        case wkbMultiPolygon:
        case wkbGeometryCollection:
            tempCollection = static_cast<const GeometryCollection*>(geometry);
            for (int i = 1; i <= tempCollection->getNumGeometries(); i++)
                AddGeometry(tempCollection->getGeometryN(i));
            return;
        default:
            break;
        }

        LineString* envelope = static_cast<LineString*>(geometry->getEnvelope());
        Point* min = envelope->getPointN(0);
        Point* max = envelope->getPointN(1);

    //    Find index values to seach over
        ccl::uint8_t min_index[3] =
        {
            ccl::uint8_t((min->X() - origin->X() - 1.3*threshold)/cube_width),
            ccl::uint8_t((min->Y() - origin->Y() - 1.3*threshold)/cube_width),
            ccl::uint8_t((min->Z() - origin->Z() - 1.3*threshold)/cube_width)
        };

        ccl::uint8_t max_index[3] = 
        {
            ccl::uint8_t((max->X() - origin->X() + 1.3*threshold)/cube_width + 0.5),
            ccl::uint8_t((max->Y() - origin->Y() + 1.3*threshold)/cube_width + 0.5),
            ccl::uint8_t((max->Z() - origin->Z() + 1.3*threshold)/cube_width + 0.5)
        };

        for (int x = min_index[0]; x < max_index[0]; x++)
        {
            for (int y = min_index[1]; y < max_index[1]; y++)
            {
                for (int z = min_index[2]; z < max_index[2]; z++)
                {
                    if (!GetCube(x,y,z)) CreateCube(x,y,z);
                }
            }
        }
        
        delete envelope;
    }

    bool Buffer3D::IsAmbiguous(Buffer3D::cubeSP _cube)
    {
        int key = _cube->CaseIndex();
        int first = 0;
        int last = 59;
        while (first <= last)
        {
            int mid = (first+last)/2;
            if (key > Ambiguous_Cases[mid]) first = mid+1;
            else if (key < Ambiguous_Cases[mid]) last = mid-1;
            else return true;
        }
        return false;
    }

    void Buffer3D::CreateTriangles(sfa::Buffer3D::cubeSP _cube, const ccl::int8_t edges[15])
    {
        for (int i = 0; i < 5; i++)
        {
            if (edges[i*3]==-1) return;
            else
            {
                PointSP v0 = _cube->edges[edges[i*3]]->point;
                PointSP v1 = _cube->edges[edges[i*3+1]]->point;
                PointSP v2 = _cube->edges[edges[i*3+2]]->point;

            //    Create normal of this triangle from edge normals
                PointSP norm(new Point(
                        _cube->edges[edges[i*3]]->norm->X() + _cube->edges[edges[i*3+1]]->norm->X() + _cube->edges[edges[i*3+2]]->norm->X(),
                        _cube->edges[edges[i*3]]->norm->Y() + _cube->edges[edges[i*3+1]]->norm->Y() + _cube->edges[edges[i*3+2]]->norm->Y(),
                        _cube->edges[edges[i*3]]->norm->Z() + _cube->edges[edges[i*3+1]]->norm->Z() + _cube->edges[edges[i*3+2]]->norm->Z()
                    ));

            //    Check which order to create the triangle using the triple product
                double TP = norm->X()*((v1->Y() - v0->Y())*(v2->Z() - v0->Z()) - (v1->Z() - v0->Z())*(v2->Y() - v0->Y())) +
                            norm->Y()*((v1->Z() - v0->Z())*(v2->X() - v0->X()) - (v1->X() - v0->X())*(v2->Z() - v0->Z())) +
                            norm->Z()*((v1->X() - v0->X())*(v2->Y() - v0->Y()) - (v1->Y() - v0->Y())*(v2->X() - v0->X()));

                LineString* line = new LineString;
                line->addPoint(new Point(v0.get()));
                if (TP > 0)
                {
                    line->addPoint(new Point(v1.get()));
                    line->addPoint(new Point(v2.get()));
                }
                else
                {
                    line->addPoint(new Point(v2.get()));
                    line->addPoint(new Point(v1.get()));
                }
                line->addPoint(new Point(v0.get()));

                Polygon* polygon = new Polygon;
                polygon->addRing(line);
                triangles->addPatch(polygon);
            }
        }
    }

    Buffer3D::Buffer3D(const Geometry* geometry, double distance, int depth)
    {
        parent = geometry;
        threshold = distance;
        triangles = NULL;

    //    Enforce max depth of 8
        size = 1;
        size = size<<depth;

        LineString* envelope = dynamic_cast<LineString*>(geometry->getEnvelope());

    //    Grow envelope by threshold
        double min[3] = 
        {
            envelope->getPointN(0)->X(),
            envelope->getPointN(0)->Y(),
            envelope->getPointN(0)->Z(),
        };

        double max[3] = 
        {
            envelope->getPointN(1)->X(),
            envelope->getPointN(1)->Y(),
            envelope->getPointN(1)->Z(),
        };

        double width = max[0]-min[0];
        if ((max[1]-min[1]) > width) width = max[1]-min[1];
        if ((max[2]-min[2]) > width) width = max[2]-min[2];

        min[0] -= (width - max[0] + min[0])/2.0 + 1.2*threshold;
        min[1] -= (width - max[1] + min[1])/2.0 + 1.2*threshold;
        min[2] -= (width - max[2] + min[2])/2.0 + 1.2*threshold;

        delete envelope;

        origin = new Point(min[0],min[1],min[2]);
        cube_width = (width + 2.4*threshold)/double(size);

    //    If cube_width is greater than the sqrt(3/4)*threshold, the results will be broken because there aren't enough cubes
    //    to achieve a seamless resolution. 
        if (cube_width < threshold*0.866025) AddGeometry(geometry);
    }

    Buffer3D::~Buffer3D(void)
    {
        delete origin;
    }

    Geometry* Buffer3D::apply(void)
    {
        if (triangles) delete triangles;
        triangles = new PolyhedralSurface;

        if (grid_map.empty()) return parent->copy();
        
        for (std::map<ccl::uint32_t,cubeSP>::iterator it = grid_map.begin(); it != grid_map.end(); ++it)
            if (it->second)
            {
                it->second->ComputeEdges();
                ccl::uint8_t key = it->second->CaseIndex();

                if (IsAmbiguous(it->second)) CreateTriangles(it->second,Triangles_A[key]);
                else CreateTriangles(it->second,Triangles_N[key]);
            }

        return triangles;
    }

}